{
  "AddConferenceClient": {
    "prefix": "AddConferenceClient",
    "body": [
      "builder.Services",
      "    .AddConferenceClient()",
      "    .ConfigureHttpClient(client => client.BaseAddress = new Uri(\"https://hc-conference-app.azurewebsites.net/graphql/\"));"
    ],
    "description": "AddConferenceClient"
  },
  "ForEachSession": {
    "prefix": "ForEachSession",
    "body": ["@foreach (var session in Sessions)"],
    "description": "ForEachSession"
  },
  "SelectableSession": {
    "prefix": "SelectableSession",
    "body": [
      "<li><button @onclick=\"() => OnSessionSelected.InvokeAsync(session)\"><span class=\"oi oi-pencil mr-2\" aria-hidden=\"true\"></span></button> @session.Title</li>"
    ],
    "description": "SelectableSession"
  },
  "SessionItem": {
    "prefix": "SessionItem",
    "body": ["<li>@session.Title</li>"],
    "description": "SessionItem"
  },
  "SessionsParameter": {
    "prefix": "SessionsParameter",
    "body": [
      "[Parameter]",
      "public IReadOnlyList<ISessionInfo> Sessions { get; set; }"
    ],
    "description": "SessionsParameter"
  },
  "OnSessionSelectedParameter": {
    "prefix": "OnSessionSelectedParameter",
    "body": [
      "[Parameter]",
      "public EventCallback<ISessionInfo> OnSessionSelected { get; set; }"
    ],
    "description": "OnSessionSelectedParameter"
  },
  "AllowSelectParameter": {
    "prefix": "AllowSelectParameter",
    "body": ["[Parameter]", "public bool AllowSelect { get; set; }"],
    "description": "AllowSelectParameter"
  },
  "IfSessions": {
    "prefix": "IfSessions",
    "body": [
      "@if (Sessions is not null)",
      "{",
      "    <h2>Sessions</h2>",
      "",
      "    <ul>",
      "        ",
      "    </ul>",
      "}"
    ],
    "description": "IfSessions"
  },
  "RenameSessionMarkup": {
    "prefix": "RenameSessionMarkup",
    "body": [
      "@if (Session is not null)",
      "{",
      "    <h2>EditSession</h2>",
      "",
      "    <br />",
      "    <p>Edit Session Title:</p>",
      "    <input @bind-value=\"@title\" />",
      "    <button @onclick=\"OnSaveTitle\">Save</button>",
      "    <button @onclick=\"() => Session = null\">Cancel</button>",
      "}"
    ],
    "description": "RenameSessionMarkup"
  },
  "RenameSessionState": {
    "prefix": "RenameSessionState",
    "body": ["private string title;", "private ISessionInfo session;"],
    "description": "RenameSessionState"
  },
  "RenameSessionParameters": {
    "prefix": "RenameSessionParameters",
    "body": [
      "[Parameter]",
      "    public EventCallback<ISessionInfo> OnSessionRenamed { get; set; }",
      "",
      "    [Parameter]",
      "    public ISessionInfo Session",
      "    {",
      "        get => session;",
      "        set",
      "        {",
      "            session = value;",
      "            title = session?.Title;",
      "        }",
      "    }"
    ],
    "description": "RenameSessionParameters"
  },
  "GetSessions": {
    "prefix": "GetSessions",
    "body": [
      "query GetSessions(\\$after: String = null) {",
      "  sessions(after: \\$after, first: 10) {",
      "    nodes {",
      "      ... SessionInfo",
      "    }",
      "    pageInfo {",
      "      endCursor",
      "    }",
      "  }",
      "}",
      "",
      "fragment SessionInfo on Session {",
      "  id",
      "  title",
      "}",
      ""
    ],
    "description": "GetSessions"
  },
  "Code": {
    "prefix": "Code",
    "body": ["@code {", "", "}"],
    "description": "Code"
  },
  "GetSessionsRenderer": {
    "prefix": "GetSessionsRenderer",
    "body": [
      "<GetSessionsRenderer>",
      "    <Content>",
      "",
      "    </Content>",
      "    <Error>",
      "        ",
      "    </Error>",
      "    <Loading>",
      "",
      "    </Loading>",
      "</GetSessionsRenderer>"
    ],
    "description": "GetSessionsRenderer"
  },
  "SessionList": {
    "prefix": "SessionList",
    "body": ["<SessionList Sessions=\"context.Sessions!.Nodes\" />"],
    "description": "SessionList"
  },
  "NextButton": {
    "prefix": "NextButton",
    "body": [
      "<button @onclick=\"() => after = context.Sessions.PageInfo.EndCursor\">Next</button>"
    ],
    "description": "NextButton"
  },
  "AfterState": {
    "prefix": "AfterState",
    "body": ["private string after = null;"],
    "description": "AfterState"
  },
  "Strategy": {
    "prefix": "Strategy",
    "body": ["Strategy=\"ExecutionStrategy.CacheFirst\""],
    "description": "Strategy"
  },
  "RenameSession": {
    "prefix": "RenameSession",
    "body": [
      "mutation RenameSession(\\$input: RenameSessionInput!) {",
      "    renameSession(input: \\$input) {",
      "        session {",
      "            ... SessionInfo",
      "        }",
      "    }",
      "}",
      ""
    ],
    "description": "RenameSession"
  },
  "RenameSessionDataComp": {
    "prefix": "RenameSessionDataComp",
    "body": ["@inherits DataComponent<RenameSessionMutation>"],
    "description": "RenameSessionDataComp"
  },
  "OnSaveTitle": {
    "prefix": "OnSaveTitle",
    "body": [
      "private async Task OnSaveTitle()",
      "    {",
      "        await Operation.ExecuteAsync(",
      "            new RenameSessionInput",
      "            {",
      "                SessionId = session.Id, ",
      "                Title = title",
      "            });",
      "",
      "        await OnSessionRenamed.InvokeAsync(session);",
      "    }"
    ],
    "description": "OnSaveTitle"
  },
  "SelectedSession": {
    "prefix": "SelectedSession",
    "body": ["private ISessionInfo selectedSession;"],
    "description": "SelectedSession"
  },
  "RenameSessionComp": {
    "prefix": "RenameSessionComp",
    "body": [
      "<RenameSession Session=\"selectedSession\" OnSessionRenamed=\"_ => selectedSession = null\" />"
    ],
    "description": "RenameSessionComp"
  },
  "EditLink": {
    "prefix": "EditLink",
    "body": [
      "<li><button @onclick=\"() => OnSessionSelected.InvokeAsync(session)\"><span class=\"oi oi-pencil mr-2\" aria-hidden=\"true\"></span></button> @session.Title</li>"
    ],
    "description": "EditLink"
  },
  "OnSelectedSessionEvent": {
    "prefix": "OnSelectedSessionEvent",
    "body": ["OnSessionSelected=\"session => selectedSession = session\""],
    "description": "OnSelectedSessionEvent"
  },
  "OnMessageReceivedDataComp": {
    "prefix": "OnMessageReceivedDataComp",
    "body": ["@inherits DataComponent<OnMessageReceivedSubscription>"],
    "description": "OnMessageReceivedDataComp"
  },
  "OnMessageReceived": {
    "prefix": "OnMessageReceived",
    "body": [
      "subscription OnMessageReceived {",
      "    onMessageReceived {",
      "        body",
      "    }",
      "}"
    ],
    "description": "OnMessageReceived"
  },
  "MessageState": {
    "prefix": "MessageState",
    "body": ["private List<string> messages = new();"],
    "description": "MessageState"
  },
  "Subscribe": {
    "prefix": "Subscribe",
    "body": [
      "protected override void OnInitialized()",
      "    {",
      "        Operation",
      "            .Watch()",
      "            .Where(t => t.IsSuccessResult())",
      "            .Select(t => t.Data.OnMessageReceived.Body)",
      "            .Subscribe(body =>",
      "            {",
      "                messages.Insert(0, body);",
      "",
      "                if (messages.Count > 5)",
      "                {",
      "                    messages.RemoveAt(messages.Count - 1);",
      "                }",
      "",
      "                StateHasChanged();",
      "            });",
      "    }"
    ],
    "description": "Subscribe"
  },
  "MessageMarkup": {
    "prefix": "MessageMarkup",
    "body": [
      "@if (messages is { Count: > 0 })",
      "{",
      "    <h2>Whats new?</h2>",
      "",
      "    <ul>",
      "    @foreach (var message in messages)",
      "        {",
      "            <li>@message</li>",
      "        }",
      "    </ul>",
      "",
      "    <br />",
      "}"
    ],
    "description": "MessageMarkup"
  },
  "ConfigureWebSocketClient": {
    "prefix": "ConfigureWebSocketClient",
    "body": [
      ".ConfigureWebSocketClient(client => client.Uri = new Uri(\"wss://hc-conference-app.azurewebsites.net/graphql/\"));"
    ],
    "description": "ConfigureWebSocketClient"
  }
}

