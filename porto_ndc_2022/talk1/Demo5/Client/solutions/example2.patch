diff --git a/crypto/frontend/scenes/dashboard/DashboardTicker.js b/crypto/frontend/scenes/dashboard/DashboardTicker.js
new file mode 100644
index 0000000000000000000000000000000000000000..fa89bb808ff2ac39bcbd5f9fd14e817b7546021f
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardTicker.js
@@ -0,0 +1,31 @@
+import {memo} from 'react';
+import {graphql, useFragment} from 'react-relay';
+
+import {Ticker} from '@/components';
+
+import DashboardTickerItem from './DashboardTickerItem';
+
+export default memo(function DashboardTicker({fragmentRef}) {
+  const data = useFragment(
+    graphql`
+      fragment DashboardTickerFragment_query on Query {
+        ticker: assets(first: 10) {
+          nodes {
+            symbol
+            ...DashboardTickerItemFragment_asset
+          }
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const assets = data.ticker?.nodes;
+
+  return (
+    <Ticker>
+      {assets?.map((asset) => (
+        <DashboardTickerItem key={asset.symbol} fragmentRef={asset} />
+      ))}
+    </Ticker>
+  );
+});
diff --git a/crypto/frontend/scenes/settings/Group.js b/crypto/frontend/scenes/settings/Group.js
new file mode 100644
index 0000000000000000000000000000000000000000..e083eb6997c21d97d563bd374c8e00293506cc6c
--- /dev/null
+++ b/crypto/frontend/scenes/settings/Group.js
@@ -0,0 +1,35 @@
+import {Accordion, AccordionSummary, Stack, Typography} from '@mui/material';
+
+import {ExpandLockedIcon, ExpandMoreIcon} from '@/icons';
+
+export const Group = ({
+  id,
+  icon: Icon,
+  title,
+  active,
+  disabled,
+  children,
+  onChange,
+}) => (
+  <Accordion
+    expanded={id === active}
+    disabled={disabled}
+    onChange={(event, expanded) => {
+      onChange(expanded ? id : false);
+    }}
+  >
+    <AccordionSummary
+      id={`panel-${id}-header`}
+      expandIcon={disabled ? <ExpandLockedIcon /> : <ExpandMoreIcon />}
+      aria-controls={`panel-${id}-content`}
+    >
+      <Stack direction="row" alignItems="center" gap={2}>
+        <Icon color="action" />
+        <Typography id={id} variant="h3">
+          {title}
+        </Typography>
+      </Stack>
+    </AccordionSummary>
+    {children}
+  </Accordion>
+);
diff --git a/crypto/frontend/scenes/settings/SettingsLinks.js b/crypto/frontend/scenes/settings/SettingsLinks.js
new file mode 100644
index 0000000000000000000000000000000000000000..dddbc6b955a09eb7629f54827e29b853f482e3fa
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsLinks.js
@@ -0,0 +1,76 @@
+import {
+  AccordionActions,
+  AccordionDetails,
+  Button,
+  Stack,
+  TextField,
+} from '@mui/material';
+import {memo, useRef} from 'react';
+
+import {Config, syncWithStorage} from '@/config';
+import {LinksIcon} from '@/icons';
+
+import {Group} from './Group';
+
+export default memo(function SettingsLinks({active, onChange}) {
+  const httpRef = useRef(null);
+  const wsRef = useRef(null);
+
+  return (
+    <Group
+      id="links"
+      icon={LinksIcon}
+      title="Links"
+      active={active}
+      onChange={onChange}
+    >
+      <form
+        name="links"
+        onSubmit={(e) => {
+          e.preventDefault();
+
+          const http = httpRef.current?.value;
+          const ws = wsRef.current?.value;
+
+          syncWithStorage({
+            HTTP_ENDPOINT: http,
+            WS_ENDPOINT: ws,
+          });
+        }}
+      >
+        <AccordionDetails id="panel-links-content" sx={{p: 6}}>
+          <Stack direction="column" gap={8}>
+            <TextField
+              inputRef={httpRef}
+              label="HTTP Endpoint"
+              defaultValue={Config.HTTP_ENDPOINT}
+              autoComplete="http"
+              helperText="The URL of the server to send GraphQL queries over HTTP."
+              required
+              fullWidth
+            />
+            <TextField
+              inputRef={wsRef}
+              label="WS Endpoint"
+              defaultValue={Config.WS_ENDPOINT}
+              autoComplete="ws"
+              helperText="The URL of the server to send GraphQL queries over WebSocket."
+              required
+              fullWidth
+            />
+          </Stack>
+        </AccordionDetails>
+        <AccordionActions
+          sx={{flexDirection: 'row-reverse', justifyContent: 'flex-start'}}
+        >
+          <Button type="submit" color="primary">
+            Save
+          </Button>
+          <Button type="reset" color="secondary">
+            Cancel
+          </Button>
+        </AccordionActions>
+      </form>
+    </Group>
+  );
+});
diff --git a/crypto/frontend/generated/DashboardTickerItemFragment_asset.graphql.js b/crypto/frontend/generated/DashboardTickerItemFragment_asset.graphql.js
new file mode 100644
index 0000000000000000000000000000000000000000..b3491798172a78aa9669226e68fe628a1d22eb4a
--- /dev/null
+++ b/crypto/frontend/generated/DashboardTickerItemFragment_asset.graphql.js
@@ -0,0 +1,92 @@
+/**
+ * @generated SignedSource<<54db9757ed5f77cdea209315ec0517dd>>
+ * @flow
+ * @lightSyntaxTransform
+ * @nogrep
+ */
+
+/* eslint-disable */
+
+'use strict';
+
+/*::
+import type { Fragment, ReaderFragment } from 'relay-runtime';
+import type { FragmentType } from "relay-runtime";
+declare export opaque type DashboardTickerItemFragment_asset$fragmentType: FragmentType;
+export type DashboardTickerItemFragment_asset$data = {|
+  +symbol: string,
+  +color: string,
+  +price: {|
+    +currency: string,
+    +lastPrice: number,
+    +change24Hour: number,
+  |},
+  +$fragmentType: DashboardTickerItemFragment_asset$fragmentType,
+|};
+export type DashboardTickerItemFragment_asset$key = {
+  +$data?: DashboardTickerItemFragment_asset$data,
+  +$fragmentSpreads: DashboardTickerItemFragment_asset$fragmentType,
+  ...
+};
+*/
+
+var node/*: ReaderFragment*/ = {
+  "argumentDefinitions": [],
+  "kind": "Fragment",
+  "metadata": null,
+  "name": "DashboardTickerItemFragment_asset",
+  "selections": [
+    {
+      "alias": null,
+      "args": null,
+      "kind": "ScalarField",
+      "name": "symbol",
+      "storageKey": null
+    },
+    {
+      "alias": null,
+      "args": null,
+      "kind": "ScalarField",
+      "name": "color",
+      "storageKey": null
+    },
+    {
+      "alias": null,
+      "args": null,
+      "concreteType": "AssetPrice",
+      "kind": "LinkedField",
+      "name": "price",
+      "plural": false,
+      "selections": [
+        {
+          "alias": null,
+          "args": null,
+          "kind": "ScalarField",
+          "name": "currency",
+          "storageKey": null
+        },
+        {
+          "alias": null,
+          "args": null,
+          "kind": "ScalarField",
+          "name": "lastPrice",
+          "storageKey": null
+        },
+        {
+          "alias": null,
+          "args": null,
+          "kind": "ScalarField",
+          "name": "change24Hour",
+          "storageKey": null
+        }
+      ],
+      "storageKey": null
+    }
+  ],
+  "type": "Asset",
+  "abstractKey": null
+};
+
+(node/*: any*/).hash = "0618973344e263ce8d730c44fc78cb88";
+
+export default node;
diff --git a/crypto/frontend/scenes/dashboard/DashboardTickerItem.js b/crypto/frontend/scenes/dashboard/DashboardTickerItem.js
new file mode 100644
index 0000000000000000000000000000000000000000..15b7199d20d492ccbf930e735802b394e2ce6930
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardTickerItem.js
@@ -0,0 +1,93 @@
+import {Link, Stack, Typography} from '@mui/material';
+import NextLink from 'next/link';
+import {memo} from 'react';
+import {graphql, useFragment} from 'react-relay';
+
+import {
+  direction,
+  findClosestAccessibleColor,
+  formatCurrency,
+  formatPercent,
+} from '@/utils';
+
+const Symbol = memo(function Symbol({value, color}) {
+  return (
+    <Typography
+      variant="caption"
+      sx={(theme) => ({
+        color: findClosestAccessibleColor(
+          color,
+          theme.palette.background.default,
+          3,
+        ),
+        fontSize: theme.typography.fontSizeTiny,
+        fontWeight: theme.typography.fontWeightMedium,
+        lineHeight: 1,
+      })}
+    >
+      {value}
+    </Typography>
+  );
+});
+
+const Price = ({value, options, locales}) => (
+  <Typography
+    variant="caption"
+    sx={(theme) => ({
+      color: theme.palette.text.primary,
+      fontSize: theme.typography.fontSizeMedium,
+      fontWeight: theme.typography.fontWeightMedium,
+      lineHeight: 1,
+    })}
+  >
+    {formatCurrency(value, options, locales)}
+  </Typography>
+);
+
+const Change = ({value, options, locales}) => (
+  <Typography
+    variant="caption"
+    sx={(theme) => ({
+      color: theme.palette.trend[direction(value)],
+      fontSize: theme.typography.fontSizeTiny,
+      fontWeight: theme.typography.fontWeightMedium,
+      lineHeight: 1,
+    })}
+  >
+    {formatPercent(value, options, locales)}
+  </Typography>
+);
+
+export default memo(function DashboardTickerItem({fragmentRef}) {
+  const asset = useFragment(
+    graphql`
+      fragment DashboardTickerItemFragment_asset on Asset {
+        symbol
+        color
+        price {
+          currency
+          lastPrice
+          change24Hour
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const {price} = asset;
+
+  return (
+    <NextLink
+      href="/currencies/[symbol]"
+      as={`/currencies/${asset.symbol}`}
+      passHref
+    >
+      <Link underline="none">
+        <Stack direction="column" spacing={1} minWidth={100}>
+          <Symbol value={asset.symbol} color={asset.color} />
+          <Price value={price.lastPrice} options={{currency: price.currency}} />
+          <Change value={price.change24Hour} />
+        </Stack>
+      </Link>
+    </NextLink>
+  );
+});
diff --git a/crypto/frontend/scenes/settings/SettingsCredentials.js b/crypto/frontend/scenes/settings/SettingsCredentials.js
new file mode 100644
index 0000000000000000000000000000000000000000..e513581d7c84842de5a2bcdb6d8428b3343ee5f0
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsCredentials.js
@@ -0,0 +1,78 @@
+import {
+  AccordionActions,
+  AccordionDetails,
+  Button,
+  Stack,
+  TextField,
+} from '@mui/material';
+import {memo, useRef} from 'react';
+
+import {PasswordField} from '@/components';
+import {Config, syncWithStorage} from '@/config';
+import {CredentialsIcon} from '@/icons';
+
+import {Group} from './Group';
+
+export default memo(function SettingsCredentials({active, onChange}) {
+  const usernameRef = useRef(null);
+  const passwordRef = useRef(null);
+
+  return (
+    <Group
+      id="credentials"
+      icon={CredentialsIcon}
+      title="Credentials"
+      active={active}
+      onChange={onChange}
+    >
+      <form
+        name="credentials"
+        onSubmit={(e) => {
+          e.preventDefault();
+
+          const username = usernameRef.current?.value?.trim();
+          const password = passwordRef.current?.value?.trim();
+          const token =
+            username && password
+              ? Buffer.from(`${username}:${password}`).toString('base64')
+              : null;
+
+          syncWithStorage({
+            USERNAME: username,
+            PASSWORD: password,
+            AUTH_TOKEN: token,
+          });
+        }}
+      >
+        <AccordionDetails id="panel-credentials-content" sx={{p: 6}}>
+          <Stack direction="column" gap={8}>
+            <TextField
+              inputRef={usernameRef}
+              label="Username"
+              defaultValue={Config.USERNAME}
+              autoComplete="username"
+              fullWidth
+            />
+            <PasswordField
+              inputRef={passwordRef}
+              label="Password"
+              defaultValue={Config.PASSWORD}
+              autoComplete="current-password"
+              fullWidth
+            />
+          </Stack>
+        </AccordionDetails>
+        <AccordionActions
+          sx={{flexDirection: 'row-reverse', justifyContent: 'flex-start'}}
+        >
+          <Button type="submit" color="primary">
+            Save
+          </Button>
+          <Button type="reset" color="secondary">
+            Cancel
+          </Button>
+        </AccordionActions>
+      </form>
+    </Group>
+  );
+});
diff --git a/crypto/frontend/generated/SettingsProfileFragment_query.graphql.js b/crypto/frontend/generated/SettingsProfileFragment_query.graphql.js
new file mode 100644
index 0000000000000000000000000000000000000000..988dac60ed4988993b17a5c8eef5f3b95ee5aa09
--- /dev/null
+++ b/crypto/frontend/generated/SettingsProfileFragment_query.graphql.js
@@ -0,0 +1,84 @@
+/**
+ * @generated SignedSource<<d02dff793dd8e5f772d461e71cc6f3ed>>
+ * @flow
+ * @lightSyntaxTransform
+ * @nogrep
+ */
+
+/* eslint-disable */
+
+'use strict';
+
+/*::
+import type { Fragment, ReaderFragment } from 'relay-runtime';
+import type { FragmentType } from "relay-runtime";
+declare export opaque type SettingsProfileFragment_query$fragmentType: FragmentType;
+export type SettingsProfileFragment_query$data = {|
+  +me: ?{|
+    +id: string,
+    +name: string,
+    +displayName: ?string,
+    +imageUrl: ?string,
+  |},
+  +$fragmentType: SettingsProfileFragment_query$fragmentType,
+|};
+export type SettingsProfileFragment_query$key = {
+  +$data?: SettingsProfileFragment_query$data,
+  +$fragmentSpreads: SettingsProfileFragment_query$fragmentType,
+  ...
+};
+*/
+
+var node/*: ReaderFragment*/ = {
+  "argumentDefinitions": [],
+  "kind": "Fragment",
+  "metadata": null,
+  "name": "SettingsProfileFragment_query",
+  "selections": [
+    {
+      "alias": null,
+      "args": null,
+      "concreteType": "User",
+      "kind": "LinkedField",
+      "name": "me",
+      "plural": false,
+      "selections": [
+        {
+          "alias": null,
+          "args": null,
+          "kind": "ScalarField",
+          "name": "id",
+          "storageKey": null
+        },
+        {
+          "alias": null,
+          "args": null,
+          "kind": "ScalarField",
+          "name": "name",
+          "storageKey": null
+        },
+        {
+          "alias": null,
+          "args": null,
+          "kind": "ScalarField",
+          "name": "displayName",
+          "storageKey": null
+        },
+        {
+          "alias": null,
+          "args": null,
+          "kind": "ScalarField",
+          "name": "imageUrl",
+          "storageKey": null
+        }
+      ],
+      "storageKey": null
+    }
+  ],
+  "type": "Query",
+  "abstractKey": null
+};
+
+(node/*: any*/).hash = "44e477a33e75832ed8eac68415b459a6";
+
+export default node;
diff --git a/crypto/frontend/scenes/dashboard/index.js b/crypto/frontend/scenes/dashboard/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..312b9c8e79235017f7e38340d94ce7d54a77e940
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/index.js
@@ -0,0 +1,15 @@
+import {Suspense} from 'react';
+
+import {ActivityIndicator, ErrorBoundaryWithRetry} from '@/components';
+
+import DashboardContainer from './DashboardContainer';
+
+export const Dashboard = () => (
+  <ErrorBoundaryWithRetry>
+    {({cacheBuster}) => (
+      <Suspense fallback={<ActivityIndicator />}>
+        <DashboardContainer cacheBuster={cacheBuster} />
+      </Suspense>
+    )}
+  </ErrorBoundaryWithRetry>
+);
diff --git a/crypto/frontend/client/index.js b/crypto/frontend/client/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..ba7f1d72553d0d6282bda51657fa7260a2aa6322
--- /dev/null
+++ b/crypto/frontend/client/index.js
@@ -0,0 +1,286 @@
+import extractFiles from 'extract-files/extractFiles.mjs';
+import isExtractableFile from 'extract-files/isExtractableFile.mjs';
+import {createClient} from 'graphql-ws';
+import {meros} from 'meros/browser';
+import {useMemo} from 'react';
+import {
+  Environment,
+  Network,
+  Observable,
+  RecordSource,
+  Store,
+} from 'relay-runtime';
+
+import {Config} from '@/config';
+import {isAsyncIterable, merge, pause} from '@/utils';
+
+let relayEnvironment;
+
+const ErrorMessages = {
+  FAILED_FETCH: 'Failed to fetch',
+  ERROR_FETCH: 'Error in fetch',
+  UNWORKABLE_FETCH: 'Unworkable fetch',
+  SOCKET_CLOSED: 'Socket closed',
+  GRAPHQL_ERRORS: 'GraphQL error',
+};
+
+class NetworkError extends Error {
+  constructor(message, options) {
+    super(message, options);
+
+    this.name = 'NetworkError';
+
+    if (options) {
+      const {cause, ...meta} = options;
+
+      Object.assign(this, meta);
+    }
+  }
+}
+
+const fetchFn = (operation, variables, cacheConfig, uploadables) => {
+  const httpEndpoint = Config.HTTP_ENDPOINT;
+  const authToken = Config.AUTH_TOKEN;
+
+  return Observable.create((sink) => {
+    const init = {
+      method: 'POST',
+      headers: {
+        Accept: 'application/json',
+        Authorization: authToken ? `basic ${authToken}` : undefined,
+      },
+    };
+
+    const {clone, files} = extractFiles(
+      {
+        id: operation.id ?? undefined,
+        query: operation.text ?? undefined,
+        variables,
+      },
+      isExtractableFile,
+    );
+
+    if (files.size) {
+      const form = new FormData();
+
+      form.set('operations', JSON.stringify(clone));
+
+      const map = {};
+      let i = 0;
+
+      files.forEach((paths) => {
+        map[i++] = paths;
+      });
+
+      form.set('map', JSON.stringify(map));
+
+      i = 0;
+      files.forEach((paths, file) => {
+        form.set(`${i++}`, file, file.name);
+      });
+
+      merge(init, {
+        body: form,
+      });
+    } else {
+      merge(init, {
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(clone),
+      });
+    }
+
+    (async () => {
+      const request = new Request(httpEndpoint, init);
+
+      try {
+        const response = await fetch(request);
+
+        // Status code in range 200-299 inclusive (2xx).
+        if (response.ok) {
+          try {
+            const parts = await meros(response);
+
+            if (isAsyncIterable(parts)) {
+              for await (const part of parts) {
+                if (!part.json) {
+                  sink.error(
+                    new NetworkError(ErrorMessages.UNWORKABLE_FETCH, {
+                      request,
+                      response,
+                    }),
+                  );
+                  break;
+                }
+
+                // If any exceptions occurred when processing the request,
+                // throw an error to indicate to the developer what went wrong.
+                if (Array.isArray(part.body.errors)) {
+                  sink.error(
+                    new NetworkError(ErrorMessages.GRAPHQL_ERRORS, {
+                      request,
+                      response,
+                    }),
+                  );
+                  break;
+                }
+
+                // DEMO: delay chunked responses
+                // await pause(2_000);
+
+                // HACK: if `label` is present, also `path` is required, remove once fixed in HC
+                // @see https://github.com/maraisr/meros/issues/15#issuecomment-1054268416
+                if (part.body.label && !part.body.path) {
+                  part.body.path = [];
+                }
+
+                sink.next(part.body);
+              }
+            } else {
+              const json = await response.json();
+
+              // If any exceptions occurred when processing the request,
+              // throw an error to indicate to the developer what went wrong.
+              if (Array.isArray(json.errors)) {
+                sink.error(
+                  new NetworkError(ErrorMessages.GRAPHQL_ERRORS, {
+                    request,
+                    response,
+                  }),
+                );
+              } else {
+                // DEMO: delay response
+                // await pause(2_000);
+
+                sink.next(json);
+              }
+            }
+
+            sink.complete();
+          } catch (err) {
+            sink.error(
+              new NetworkError(ErrorMessages.UNWORKABLE_FETCH, {
+                cause: err,
+                request,
+                response,
+              }),
+              true,
+            );
+          }
+        } else {
+          sink.error(
+            new NetworkError(ErrorMessages.ERROR_FETCH, {request, response}),
+          );
+        }
+      } catch (err) {
+        sink.error(
+          new NetworkError(ErrorMessages.FAILED_FETCH, {cause: err, request}),
+          true,
+        );
+      }
+    })();
+  });
+};
+
+let wsClient;
+
+/**
+ * With `graphql-ws`.
+ * @see https://github.com/enisdenjo/graphql-ws
+ */
+const subscribeFn = (operation, variables) => {
+  const wsEndpoint = Config.WS_ENDPOINT;
+  const authToken = Config.AUTH_TOKEN;
+
+  const client = (wsClient ??= createClient({
+    url: wsEndpoint,
+    connectionParams: {
+      Authorization: authToken ? `basic ${authToken}` : undefined,
+    },
+  }));
+
+  return Observable.create((sink) =>
+    client.subscribe(
+      {
+        id: operation.id ?? undefined,
+        query: operation.text,
+        variables,
+      },
+      {
+        ...sink,
+        error: (err) => {
+          if (Array.isArray(err)) {
+            return sink.error(
+              new NetworkError(ErrorMessages.ERROR_FETCH, {cause: err}),
+            );
+          }
+
+          if (err instanceof CloseEvent) {
+            return sink.error(
+              new NetworkError(ErrorMessages.SOCKET_CLOSED, {cause: err}),
+            );
+          }
+
+          return sink.error(err, true);
+        },
+      },
+    ),
+  );
+};
+
+const createEnvironment = (initialRecords) => {
+  const source = new RecordSource(initialRecords);
+
+  /**
+   * Presence of Data
+   * @see https://relay.dev/docs/guided-tour/reusing-cached-data/presence-of-data/
+   *
+   * - Note that having a buffer size of 0 is equivalent to not having the release buffer, which means that queries will be immediately released and collected.
+   * - By default, environments have a release buffer size of 10.
+   *
+   * @example
+   * // last 10 queries
+   * gcReleaseBufferSize: 10,
+   *
+   *
+   * Staleness of Data
+   * @see https://relay.dev/docs/guided-tour/reusing-cached-data/staleness-of-data/
+   *
+   * - If the query cache expiration time is not provided, staleness checks only look at whether the referenced records have been invalidated.
+   *
+   * @example
+   * // 1 min
+   * queryCacheExpirationTime: 60 * 1_000,
+   */
+  const options = {};
+
+  const store = new Store(source, options);
+
+  const network = Network.create(fetchFn, subscribeFn);
+
+  return new Environment({
+    network,
+    store,
+  });
+};
+
+export const initEnvironment = (initialRecords) => {
+  // Create a network layer from the fetch function
+  const environment = relayEnvironment ?? createEnvironment(initialRecords);
+
+  // If your page has Next.js data fetching methods that use Relay, the initial records
+  // will get hydrated here
+  if (initialRecords) {
+    environment.getStore().publish(new RecordSource(initialRecords));
+  }
+  // For SSG and SSR always create a new Relay environment
+  if (typeof window === 'undefined') return environment;
+  // Create the Relay environment once in the client
+  if (!relayEnvironment) relayEnvironment = environment;
+
+  return relayEnvironment;
+};
+
+export const useEnvironment = (initialRecords) =>
+  useMemo(() => initEnvironment(initialRecords), [initialRecords]);
diff --git a/crypto/frontend/pages/dashboard.js b/crypto/frontend/pages/dashboard.js
new file mode 100644
index 0000000000000000000000000000000000000000..f5b3bfcc5a809b3d23c30b8a2d16fc34f5eabf4a
--- /dev/null
+++ b/crypto/frontend/pages/dashboard.js
@@ -0,0 +1 @@
+export {Dashboard as default} from '@/scenes';
diff --git a/crypto/frontend/generated/DashboardContainerQuery.graphql.js b/crypto/frontend/generated/DashboardContainerQuery.graphql.js
new file mode 100644
index 0000000000000000000000000000000000000000..5c7e7acb9bb8a7a9f4d6b5fb935ffb9a1fe86ced
--- /dev/null
+++ b/crypto/frontend/generated/DashboardContainerQuery.graphql.js
@@ -0,0 +1,146 @@
+/**
+ * @generated SignedSource<<8414ed2d9484534512d3e75d6383a9fb>>
+ * @flow
+ * @lightSyntaxTransform
+ * @nogrep
+ */
+
+/* eslint-disable */
+
+'use strict';
+
+/*::
+import type { ConcreteRequest, Query } from 'relay-runtime';
+import type { DashboardTickerFragment_query$fragmentType } from "./DashboardTickerFragment_query.graphql";
+export type DashboardContainerQuery$variables = {||};
+export type DashboardContainerQuery$data = {|
+  +$fragmentSpreads: DashboardTickerFragment_query$fragmentType,
+|};
+export type DashboardContainerQuery = {|
+  variables: DashboardContainerQuery$variables,
+  response: DashboardContainerQuery$data,
+|};
+*/
+
+var node/*: ConcreteRequest*/ = (function(){
+var v0 = {
+  "alias": null,
+  "args": null,
+  "kind": "ScalarField",
+  "name": "id",
+  "storageKey": null
+};
+return {
+  "fragment": {
+    "argumentDefinitions": [],
+    "kind": "Fragment",
+    "metadata": null,
+    "name": "DashboardContainerQuery",
+    "selections": [
+      {
+        "args": null,
+        "kind": "FragmentSpread",
+        "name": "DashboardTickerFragment_query"
+      }
+    ],
+    "type": "Query",
+    "abstractKey": null
+  },
+  "kind": "Request",
+  "operation": {
+    "argumentDefinitions": [],
+    "kind": "Operation",
+    "name": "DashboardContainerQuery",
+    "selections": [
+      {
+        "alias": "ticker",
+        "args": [
+          {
+            "kind": "Literal",
+            "name": "first",
+            "value": 10
+          }
+        ],
+        "concreteType": "AssetsConnection",
+        "kind": "LinkedField",
+        "name": "assets",
+        "plural": false,
+        "selections": [
+          {
+            "alias": null,
+            "args": null,
+            "concreteType": "Asset",
+            "kind": "LinkedField",
+            "name": "nodes",
+            "plural": true,
+            "selections": [
+              {
+                "alias": null,
+                "args": null,
+                "kind": "ScalarField",
+                "name": "symbol",
+                "storageKey": null
+              },
+              {
+                "alias": null,
+                "args": null,
+                "kind": "ScalarField",
+                "name": "color",
+                "storageKey": null
+              },
+              {
+                "alias": null,
+                "args": null,
+                "concreteType": "AssetPrice",
+                "kind": "LinkedField",
+                "name": "price",
+                "plural": false,
+                "selections": [
+                  {
+                    "alias": null,
+                    "args": null,
+                    "kind": "ScalarField",
+                    "name": "currency",
+                    "storageKey": null
+                  },
+                  {
+                    "alias": null,
+                    "args": null,
+                    "kind": "ScalarField",
+                    "name": "lastPrice",
+                    "storageKey": null
+                  },
+                  {
+                    "alias": null,
+                    "args": null,
+                    "kind": "ScalarField",
+                    "name": "change24Hour",
+                    "storageKey": null
+                  },
+                  (v0/*: any*/)
+                ],
+                "storageKey": null
+              },
+              (v0/*: any*/)
+            ],
+            "storageKey": null
+          }
+        ],
+        "storageKey": "assets(first:10)"
+      }
+    ]
+  },
+  "params": {
+    "cacheID": "9e85b35743028a27f46bfce0686e753d",
+    "id": null,
+    "metadata": {},
+    "name": "DashboardContainerQuery",
+    "operationKind": "query",
+    "text": "query DashboardContainerQuery {\n  ...DashboardTickerFragment_query\n}\n\nfragment DashboardTickerFragment_query on Query {\n  ticker: assets(first: 10) {\n    nodes {\n      symbol\n      ...DashboardTickerItemFragment_asset\n      id\n    }\n  }\n}\n\nfragment DashboardTickerItemFragment_asset on Asset {\n  symbol\n  color\n  price {\n    currency\n    lastPrice\n    change24Hour\n    id\n  }\n}\n"
+  }
+};
+})();
+
+(node/*: any*/).hash = "bb04b8478e2f5b14316c5dc468ab9d99";
+
+export default node;
diff --git a/crypto/frontend/scenes/settings/SettingsProfile.js b/crypto/frontend/scenes/settings/SettingsProfile.js
new file mode 100644
index 0000000000000000000000000000000000000000..8bb53a87c94978b5e7285eee838b04e6c5c13ec7
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsProfile.js
@@ -0,0 +1,199 @@
+import {
+  AccordionActions,
+  AccordionDetails,
+  Avatar,
+  Button,
+  IconButton,
+  Stack,
+  TextField,
+} from '@mui/material';
+import {memo, useCallback, useEffect, useRef, useState} from 'react';
+import {useDropzone} from 'react-dropzone';
+import {graphql, useFragment, useMutation} from 'react-relay';
+
+import {DeleteIcon, FileUploadIcon, ProfileIcon} from '@/icons';
+
+import {Group} from './Group';
+
+const useUpdateUserProfile = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation SettingsProfileUUPMutation($input: UpdateUserProfileInput!) {
+      updateUserProfile(input: $input) {
+        updatedUser {
+          displayName
+          imageUrl
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, displayName, image, previewUrl}) => {
+      commit({
+        variables: {
+          input: Object.assign({displayName}, image !== undefined && {image}),
+        },
+        optimisticUpdater(store) {
+          const record = store.get(id);
+
+          record.setValue(displayName, 'displayName');
+
+          if (previewUrl !== undefined) {
+            record.setValue(previewUrl, 'imageUrl');
+          }
+        },
+        onCompleted() {
+          console.log('profile was updated');
+        },
+        onError() {
+          console.log('there was a problem while updating the profile');
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export default memo(function SettingsProfile({active, onChange, fragmentRef}) {
+  const data = useFragment(
+    graphql`
+      fragment SettingsProfileFragment_query on Query {
+        me {
+          id
+          name
+          displayName
+          imageUrl
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const me = data.me;
+
+  const [updateUserProfile] = useUpdateUserProfile();
+
+  const [[image, previewUrl], setAvatar] = useState([]);
+
+  const {getRootProps, getInputProps, open} = useDropzone({
+    accept: 'image/*',
+    multiple: false,
+    maxFiles: 1,
+    maxSize: 1_024_000,
+    onDropAccepted: ([file]) => {
+      console.log('image drop accepted');
+
+      setAvatar([file, URL.createObjectURL(file)]);
+    },
+    onDropRejected: (fileRejections) => {
+      console.log('image drop rejected', fileRejections);
+    },
+  });
+
+  const displaynameRef = useRef(null);
+
+  useEffect(() => {
+    if (previewUrl) {
+      return () => {
+        URL.revokeObjectURL(previewUrl);
+      };
+    }
+  }, [previewUrl]);
+
+  return (
+    <Group
+      id="profile"
+      icon={ProfileIcon}
+      title="Profile"
+      active={active}
+      disabled={!me}
+      onChange={onChange}
+    >
+      {me && (
+        <form
+          name="links"
+          onSubmit={(e) => {
+            e.preventDefault();
+
+            const displayName = displaynameRef.current?.value || null;
+
+            updateUserProfile({
+              id: me.id,
+              displayName,
+              image,
+              previewUrl,
+            });
+          }}
+        >
+          <AccordionDetails id="panel-profile-content" sx={{p: 6}}>
+            <Stack direction="column" alignItems="center" gap={8}>
+              <input {...getInputProps()} />
+              <Avatar
+                src={previewUrl === undefined ? me.imageUrl : previewUrl}
+                sx={(theme) => ({
+                  width: 192,
+                  height: 192,
+                  border: `1px solid ${theme.palette.action.focus}`,
+                  backgroundColor: theme.palette.action.focus,
+                  outline: 0,
+                  '&:hover': {
+                    borderColor: theme.palette.text.primary,
+                  },
+                  '&:focus': {
+                    borderWidth: 2,
+                    borderColor: theme.palette.primary.main,
+                  },
+                })}
+                {...getRootProps()}
+              />
+              <Stack direction="row">
+                <IconButton
+                  size="medium"
+                  aria-label="remove image"
+                  disabled={!previewUrl && !me.imageUrl}
+                  onClick={() => {
+                    setAvatar([null, null]);
+                  }}
+                >
+                  <DeleteIcon fontSize="inherit" />
+                </IconButton>
+                <IconButton
+                  size="medium"
+                  aria-label="upload image"
+                  onClick={open}
+                >
+                  <FileUploadIcon fontSize="inherit" />
+                </IconButton>
+              </Stack>
+              <TextField
+                inputRef={displaynameRef}
+                label="Displayname"
+                defaultValue={me.displayName}
+                autoComplete="displayname"
+                helperText="Your name may appear around where you contribute or are mentioned. You can remove it at any time."
+                fullWidth
+              />
+            </Stack>
+          </AccordionDetails>
+          <AccordionActions
+            sx={{flexDirection: 'row-reverse', justifyContent: 'flex-start'}}
+          >
+            <Button type="submit" color="primary">
+              Save
+            </Button>
+            <Button
+              type="reset"
+              color="secondary"
+              onClick={() => {
+                setAvatar([]);
+              }}
+            >
+              Cancel
+            </Button>
+          </AccordionActions>
+        </form>
+      )}
+    </Group>
+  );
+});
diff --git a/crypto/frontend/pages/index.js b/crypto/frontend/pages/index.js
index 8b3e2fa25f805f5e59f6da3bc19b8f1365bbb124..f5b3bfcc5a809b3d23c30b8a2d16fc34f5eabf4a 100644
--- a/crypto/frontend/pages/index.js
+++ b/crypto/frontend/pages/index.js
@@ -1 +1 @@
-export {Dummy as default} from '@/components';
+export {Dashboard as default} from '@/scenes';
diff --git a/crypto/frontend/pages/settings.js b/crypto/frontend/pages/settings.js
new file mode 100644
index 0000000000000000000000000000000000000000..09b0180341866eebce62d54a8c9e5f309e7e2426
--- /dev/null
+++ b/crypto/frontend/pages/settings.js
@@ -0,0 +1 @@
+export {Settings as default} from '@/scenes';
diff --git a/crypto/frontend/scenes/dashboard/DashboardContainer.js b/crypto/frontend/scenes/dashboard/DashboardContainer.js
new file mode 100644
index 0000000000000000000000000000000000000000..df4bb3b00bc1a4a5d5b71f71abe1adac35684f63
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardContainer.js
@@ -0,0 +1,28 @@
+import {Stack} from '@mui/material';
+import ErrorPage from 'next/error';
+import {memo} from 'react';
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+import DashboardTicker from './DashboardTicker';
+
+export default memo(function DashboardContainer({cacheBuster}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query DashboardContainerQuery {
+        ...DashboardTickerFragment_query
+      }
+    `,
+    {},
+    {fetchKey: cacheBuster},
+  );
+
+  if (!data) {
+    return <ErrorPage statusCode={404} title="Out of service" />;
+  }
+
+  return (
+    <Stack gap={2}>
+      <DashboardTicker fragmentRef={data} />
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/settings/SettingsContainer.js b/crypto/frontend/scenes/settings/SettingsContainer.js
new file mode 100644
index 0000000000000000000000000000000000000000..0aaf8535e57544d4c3a176a64c43248195bce3f7
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsContainer.js
@@ -0,0 +1,33 @@
+import {memo} from 'react';
+import {useState} from 'react';
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+import SettingsCredentials from './SettingsCredentials';
+import SettingsLinks from './SettingsLinks';
+import SettingsProfile from './SettingsProfile';
+
+export default memo(function SettingsContainer({cacheBuster}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query SettingsContainerQuery {
+        ...SettingsProfileFragment_query
+      }
+    `,
+    {},
+    {fetchKey: cacheBuster},
+  );
+
+  const [active, setActive] = useState('profile');
+
+  return (
+    <>
+      <SettingsLinks active={active} onChange={setActive} />
+      <SettingsCredentials active={active} onChange={setActive} />
+      <SettingsProfile
+        fragmentRef={data}
+        active={active}
+        onChange={setActive}
+      />
+    </>
+  );
+});
diff --git a/crypto/frontend/pages/_app.js b/crypto/frontend/pages/_app.js
index 8538cf3da3d9b697b1504a3947910a1823bea109..d430ee8773ac608e702e9e8de2c6123554c3745c 100644
--- a/crypto/frontend/pages/_app.js
+++ b/crypto/frontend/pages/_app.js
@@ -1,7 +1,9 @@
 import {CacheProvider} from '@emotion/react';
 import {CssBaseline, ThemeProvider} from '@mui/material';
 import {useEffect} from 'react';
+import {RelayEnvironmentProvider} from 'react-relay';
 
+import {useEnvironment} from '@/client';
 import {
   Content,
   Hacks,
@@ -19,6 +21,7 @@ export default function MyApp({
   emotionCache = clientSideEmotionCache,
   pageProps,
 }) {
+  const environment = useEnvironment(pageProps.initialRecords);
   const [theme, mode] = usePreferredTheme();
 
   useEffect(() => {
@@ -28,19 +31,21 @@ export default function MyApp({
   }, []);
 
   return (
-    <CacheProvider value={emotionCache}>
-      <ThemeProvider theme={theme}>
-        <ModeProvider value={mode}>
-          <Metadata />
-          <CssBaseline enableColorScheme />
-          <SlotsProvider>
-            <Content>
-              <Component {...pageProps} />
-            </Content>
-          </SlotsProvider>
-          <Hacks />
-        </ModeProvider>
-      </ThemeProvider>
-    </CacheProvider>
+    <RelayEnvironmentProvider environment={environment}>
+      <CacheProvider value={emotionCache}>
+        <ThemeProvider theme={theme}>
+          <ModeProvider value={mode}>
+            <Metadata />
+            <CssBaseline enableColorScheme />
+            <SlotsProvider>
+              <Content variant="crypto">
+                <Component {...pageProps} />
+              </Content>
+            </SlotsProvider>
+            <Hacks />
+          </ModeProvider>
+        </ThemeProvider>
+      </CacheProvider>
+    </RelayEnvironmentProvider>
   );
 }
diff --git a/crypto/frontend/generated/SettingsContainerQuery.graphql.js b/crypto/frontend/generated/SettingsContainerQuery.graphql.js
new file mode 100644
index 0000000000000000000000000000000000000000..1915884b256218bbfc6174fd4fc97458a8dc99ea
--- /dev/null
+++ b/crypto/frontend/generated/SettingsContainerQuery.graphql.js
@@ -0,0 +1,100 @@
+/**
+ * @generated SignedSource<<209ad39deb7bef604bf502e896f9e111>>
+ * @flow
+ * @lightSyntaxTransform
+ * @nogrep
+ */
+
+/* eslint-disable */
+
+'use strict';
+
+/*::
+import type { ConcreteRequest, Query } from 'relay-runtime';
+import type { SettingsProfileFragment_query$fragmentType } from "./SettingsProfileFragment_query.graphql";
+export type SettingsContainerQuery$variables = {||};
+export type SettingsContainerQuery$data = {|
+  +$fragmentSpreads: SettingsProfileFragment_query$fragmentType,
+|};
+export type SettingsContainerQuery = {|
+  variables: SettingsContainerQuery$variables,
+  response: SettingsContainerQuery$data,
+|};
+*/
+
+var node/*: ConcreteRequest*/ = {
+  "fragment": {
+    "argumentDefinitions": [],
+    "kind": "Fragment",
+    "metadata": null,
+    "name": "SettingsContainerQuery",
+    "selections": [
+      {
+        "args": null,
+        "kind": "FragmentSpread",
+        "name": "SettingsProfileFragment_query"
+      }
+    ],
+    "type": "Query",
+    "abstractKey": null
+  },
+  "kind": "Request",
+  "operation": {
+    "argumentDefinitions": [],
+    "kind": "Operation",
+    "name": "SettingsContainerQuery",
+    "selections": [
+      {
+        "alias": null,
+        "args": null,
+        "concreteType": "User",
+        "kind": "LinkedField",
+        "name": "me",
+        "plural": false,
+        "selections": [
+          {
+            "alias": null,
+            "args": null,
+            "kind": "ScalarField",
+            "name": "id",
+            "storageKey": null
+          },
+          {
+            "alias": null,
+            "args": null,
+            "kind": "ScalarField",
+            "name": "name",
+            "storageKey": null
+          },
+          {
+            "alias": null,
+            "args": null,
+            "kind": "ScalarField",
+            "name": "displayName",
+            "storageKey": null
+          },
+          {
+            "alias": null,
+            "args": null,
+            "kind": "ScalarField",
+            "name": "imageUrl",
+            "storageKey": null
+          }
+        ],
+        "storageKey": null
+      }
+    ]
+  },
+  "params": {
+    "cacheID": "3c305dd58e01fc7eb0971f73ca979d49",
+    "id": null,
+    "metadata": {},
+    "name": "SettingsContainerQuery",
+    "operationKind": "query",
+    "text": "query SettingsContainerQuery {\n  ...SettingsProfileFragment_query\n}\n\nfragment SettingsProfileFragment_query on Query {\n  me {\n    id\n    name\n    displayName\n    imageUrl\n  }\n}\n"
+  }
+};
+
+(node/*: any*/).hash = "6c34ee5545809f6e1770ecf4fb9a68a5";
+
+export default node;
diff --git a/crypto/frontend/scenes/settings/index.js b/crypto/frontend/scenes/settings/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..decad83e3475289c4703057a581da1dbc0656752
--- /dev/null
+++ b/crypto/frontend/scenes/settings/index.js
@@ -0,0 +1,15 @@
+import {Suspense} from 'react';
+
+import {ActivityIndicator, ErrorBoundaryWithRetry} from '@/components';
+
+import SettingsContainer from './SettingsContainer';
+
+export const Settings = ({symbol}) => (
+  <ErrorBoundaryWithRetry key={symbol}>
+    {({cacheBuster}) => (
+      <Suspense fallback={<ActivityIndicator />}>
+        <SettingsContainer cacheBuster={cacheBuster} />
+      </Suspense>
+    )}
+  </ErrorBoundaryWithRetry>
+);
diff --git a/crypto/frontend/scenes/index.js b/crypto/frontend/scenes/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..1bf359a678d71f0f3c9d18a81f4f9a146ae64db2
--- /dev/null
+++ b/crypto/frontend/scenes/index.js
@@ -0,0 +1,2 @@
+export * from './dashboard';
+export * from './settings';
diff --git a/crypto/frontend/schema/server.graphql b/crypto/frontend/schema/server.graphql
new file mode 100644
index 0000000000000000000000000000000000000000..00445f2105c0f48d9fcb8b073182e2292d5414ba
--- /dev/null
+++ b/crypto/frontend/schema/server.graphql
@@ -0,0 +1,999 @@
+"""
+The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
+"""
+directive @defer(
+  """
+  Deferred when true.
+  """
+  if: Boolean
+
+  """
+  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
+  """
+  label: String
+) on FRAGMENT_SPREAD | INLINE_FRAGMENT
+
+"""
+The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
+"""
+directive @stream(
+  """
+  Streamed when true.
+  """
+  if: Boolean
+
+  """
+  The initial elements that shall be send down to the consumer.
+  """
+  initialCount: Int! = 0
+
+  """
+  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
+  """
+  label: String
+) on FIELD
+
+input AddAssetToWatchlistInput {
+  symbol: String!
+}
+
+type AddAssetToWatchlistPayload {
+  addedAsset: Asset
+  watchlist: Watchlist
+}
+
+input AddAssetsToWatchlistInput {
+  symbols: [String!]!
+}
+
+type AddAssetsToWatchlistPayload {
+  addedAssets(
+    """
+    Returns the elements in the list that come after the specified cursor.
+    """
+    after: String
+
+    """
+    Returns the elements in the list that come before the specified cursor.
+    """
+    before: String
+
+    """
+    Returns the first _n_ elements from the list.
+    """
+    first: Int
+
+    """
+    Returns the last _n_ elements from the list.
+    """
+    last: Int
+  ): AddedAssetsConnection
+  watchlist: Watchlist
+}
+
+"""
+A connection to a list of items.
+"""
+type AddedAssetsConnection {
+  """
+  A list of edges.
+  """
+  edges: [AddedAssetsEdge!]
+
+  """
+  A flattened list of the nodes.
+  """
+  nodes: [Asset!]
+
+  """
+  Information to aid in pagination.
+  """
+  pageInfo: PageInfo!
+}
+
+"""
+An edge in a connection.
+"""
+type AddedAssetsEdge {
+  """
+  A cursor for use in pagination.
+  """
+  cursor: String!
+
+  """
+  The item at the end of the edge.
+  """
+  node: Asset!
+}
+
+type Alert implements Node {
+  asset: Asset!
+  currency: String!
+  id: ID!
+  percentageChange: Float!
+  recurring: Boolean!
+  targetPrice: Float!
+  username: String!
+}
+
+type Asset implements Node {
+  alerts(
+    """
+    Returns the elements in the list that come after the specified cursor.
+    """
+    after: String
+
+    """
+    Returns the elements in the list that come before the specified cursor.
+    """
+    before: String
+
+    """
+    Returns the first _n_ elements from the list.
+    """
+    first: Int
+
+    """
+    Returns the last _n_ elements from the list.
+    """
+    last: Int
+  ): AssetAlertsConnection
+  color: String!
+  description: String
+  hasAlerts: Boolean!
+  id: ID!
+  imageUrl: String
+  isInWatchlist: Boolean
+  name: String!
+  price: AssetPrice!
+  slug: String!
+  symbol: String!
+  website: String
+  whitePaper: String
+}
+
+"""
+A connection to a list of items.
+"""
+type AssetAlertsConnection {
+  """
+  A list of edges.
+  """
+  edges: [AssetAlertsEdge!]
+
+  """
+  A flattened list of the nodes.
+  """
+  nodes: [Alert!]
+
+  """
+  Information to aid in pagination.
+  """
+  pageInfo: PageInfo!
+  totalCount: Int!
+}
+
+"""
+An edge in a connection.
+"""
+type AssetAlertsEdge {
+  """
+  A cursor for use in pagination.
+  """
+  cursor: String!
+
+  """
+  The item at the end of the edge.
+  """
+  node: Alert!
+}
+
+input AssetFilterInput {
+  and: [AssetFilterInput!]
+  description: StringOperationFilterInput
+  name: StringOperationFilterInput
+  or: [AssetFilterInput!]
+  price: AssetPriceFilterInput
+  slug: StringOperationFilterInput
+  symbol: StringOperationFilterInput
+  website: StringOperationFilterInput
+}
+
+type AssetPrice implements Node {
+  asset: Asset!
+  change(span: ChangeSpan!): AssetPriceChange
+  change24Hour: Float!
+  circulatingSupply: Float!
+  currency: String!
+  high24Hour: Float!
+  id: ID!
+  lastPrice: Float!
+  low24Hour: Float!
+  marketCap: Float!
+  maxSupply: Float!
+  modifiedAt: DateTime
+  open24Hour: Float!
+  symbol: String!
+  tradableMarketCapRank: Float!
+  tradingActivity: Float!
+  volume24Hour: Float!
+  volumePercentChange24Hour: Float!
+}
+
+type AssetPriceChange implements Node {
+  history(
+    """
+    Returns the elements in the list that come after the specified cursor.
+    """
+    after: String
+
+    """
+    Returns the elements in the list that come before the specified cursor.
+    """
+    before: String
+
+    """
+    Returns the first _n_ elements from the list.
+    """
+    first: Int
+
+    """
+    Returns the last _n_ elements from the list.
+    """
+    last: Int
+  ): HistoryConnection
+  id: ID!
+  percentageChange: Float!
+}
+
+input AssetPriceFilterInput {
+  and: [AssetPriceFilterInput!]
+  asset: AssetFilterInput
+  assetId: ComparableInt32OperationFilterInput
+  change24Hour: ComparableDoubleOperationFilterInput
+  circulatingSupply: ComparableDoubleOperationFilterInput
+  currency: StringOperationFilterInput
+  high24Hour: ComparableDoubleOperationFilterInput
+  id: ComparableInt32OperationFilterInput
+  lastPrice: ComparableDoubleOperationFilterInput
+  low24Hour: ComparableDoubleOperationFilterInput
+  marketCap: ComparableDoubleOperationFilterInput
+  maxSupply: ComparableDoubleOperationFilterInput
+  modifiedAt: ComparableNullableOfDateTimeOperationFilterInput
+  open24Hour: ComparableDoubleOperationFilterInput
+  or: [AssetPriceFilterInput!]
+  symbol: StringOperationFilterInput
+  tradableMarketCapRank: ComparableDoubleOperationFilterInput
+  tradingActivity: ComparableDoubleOperationFilterInput
+  volume24Hour: ComparableDoubleOperationFilterInput
+  volumePercentChange24Hour: ComparableDoubleOperationFilterInput
+}
+
+type AssetPriceHistory {
+  epoch: Int!
+  price: Float!
+}
+
+input AssetPriceSortInput {
+  asset: AssetSortInput
+  assetId: SortEnumType
+  change24Hour: SortEnumType
+  circulatingSupply: SortEnumType
+  currency: SortEnumType
+  high24Hour: SortEnumType
+  id: SortEnumType
+  lastPrice: SortEnumType
+  low24Hour: SortEnumType
+  marketCap: SortEnumType
+  maxSupply: SortEnumType
+  modifiedAt: SortEnumType
+  open24Hour: SortEnumType
+  symbol: SortEnumType
+  tradableMarketCapRank: SortEnumType
+  tradingActivity: SortEnumType
+  volume24Hour: SortEnumType
+  volumePercentChange24Hour: SortEnumType
+}
+
+input AssetSortInput {
+  name: SortEnumType
+  price: AssetPriceSortInput
+  slug: SortEnumType
+  symbol: SortEnumType
+}
+
+"""
+A connection to a list of items.
+"""
+type AssetsConnection {
+  """
+  A list of edges.
+  """
+  edges: [AssetsEdge!]
+
+  """
+  A flattened list of the nodes.
+  """
+  nodes: [Asset!]
+
+  """
+  Information to aid in pagination.
+  """
+  pageInfo: PageInfo!
+}
+
+"""
+An edge in a connection.
+"""
+type AssetsEdge {
+  """
+  A cursor for use in pagination.
+  """
+  cursor: String!
+
+  """
+  The item at the end of the edge.
+  """
+  node: Asset!
+}
+
+union ChangeAssetPositionInWatchlistError =
+    IndexOutOfRangeError
+  | NotAuthenticatedError
+  | UnknownAssetError
+  | UnknownWatchlistError
+
+input ChangeAssetPositionInWatchlistInput {
+  index: Int!
+  symbol: String!
+}
+
+type ChangeAssetPositionInWatchlistPayload {
+  errors: [ChangeAssetPositionInWatchlistError!]
+  watchlist: Watchlist
+}
+
+enum ChangeSpan {
+  ALL
+  DAY
+  HOUR
+  MONTH
+  WEEK
+  YEAR
+}
+
+input ComparableDoubleOperationFilterInput {
+  eq: Float
+  gt: Float
+  gte: Float
+  in: [Float!]
+  lt: Float
+  lte: Float
+  neq: Float
+  ngt: Float
+  ngte: Float
+  nin: [Float!]
+  nlt: Float
+  nlte: Float
+}
+
+input ComparableInt32OperationFilterInput {
+  eq: Int
+  gt: Int
+  gte: Int
+  in: [Int!]
+  lt: Int
+  lte: Int
+  neq: Int
+  ngt: Int
+  ngte: Int
+  nin: [Int!]
+  nlt: Int
+  nlte: Int
+}
+
+input ComparableNullableOfDateTimeOperationFilterInput {
+  eq: DateTime
+  gt: DateTime
+  gte: DateTime
+  in: [DateTime]
+  lt: DateTime
+  lte: DateTime
+  neq: DateTime
+  ngt: DateTime
+  ngte: DateTime
+  nin: [DateTime]
+  nlt: DateTime
+  nlte: DateTime
+}
+
+union CreateAlertError = InvalidTargetPriceError | UnknownCurrencyError
+
+input CreateAlertInput {
+  currency: String = "USD"
+  recurring: Boolean! = false
+  symbol: String!
+  targetPrice: Float!
+}
+
+type CreateAlertPayload {
+  createdAlert: Alert
+  errors: [CreateAlertError!]
+}
+
+"""
+The `DateTime` scalar represents an ISO-8601 compliant date time type.
+"""
+scalar DateTime
+
+union DeleteAlertError = EntityNotFoundError
+
+input DeleteAlertInput {
+  alertId: ID!
+}
+
+type DeleteAlertPayload {
+  deletedAlert: Alert
+  errors: [DeleteAlertError!]
+}
+
+union DeleteNotificationError = UnknownNotificationError
+
+input DeleteNotificationInput {
+  notificationId: ID!
+}
+
+type DeleteNotificationPayload {
+  deletedNotification: Notification
+  errors: [DeleteNotificationError!]
+}
+
+union DeleteNotificationsError = UnknownNotificationError
+
+input DeleteNotificationsInput {
+  notificationIds: [ID!]!
+}
+
+type DeleteNotificationsPayload {
+  deletedNotifications: [Notification!]
+  errors: [DeleteNotificationsError!]
+}
+
+type EntityNotFoundError implements Error {
+  id: Int!
+  message: String!
+}
+
+interface Error {
+  message: String!
+}
+
+"""
+A connection to a list of items.
+"""
+type HistoryConnection {
+  """
+  A list of edges.
+  """
+  edges: [HistoryEdge!]
+
+  """
+  A flattened list of the nodes.
+  """
+  nodes: [AssetPriceHistory]
+
+  """
+  Information to aid in pagination.
+  """
+  pageInfo: PageInfo!
+}
+
+"""
+An edge in a connection.
+"""
+type HistoryEdge {
+  """
+  A cursor for use in pagination.
+  """
+  cursor: String!
+
+  """
+  The item at the end of the edge.
+  """
+  node: AssetPriceHistory
+}
+
+input ImportAssetInput {
+  symbol: String!
+}
+
+type ImportAssetPayload {
+  importedAsset: Asset
+}
+
+input ImportAssetsInput {
+  symbols: [String!]!
+}
+
+type ImportAssetsPayload {
+  importedAssets: [Asset!]
+}
+
+type IndexOutOfRangeError implements Error {
+  message: String!
+}
+
+type InvalidTargetPriceError implements Error {
+  message: String!
+  targetPrice: Float!
+}
+
+union MarkNotificationReadError = UnknownNotificationError
+
+input MarkNotificationReadInput {
+  notificationId: ID!
+}
+
+type MarkNotificationReadPayload {
+  errors: [MarkNotificationReadError!]
+  readNotification: Notification
+}
+
+union MarkNotificationsReadError = UnknownNotificationError
+
+input MarkNotificationsReadInput {
+  notificationIds: [ID!]!
+}
+
+type MarkNotificationsReadPayload {
+  errors: [MarkNotificationsReadError!]
+  readNotifications: [Notification!]
+}
+
+type Mutation {
+  addAssetToWatchlist(
+    input: AddAssetToWatchlistInput!
+  ): AddAssetToWatchlistPayload!
+  addAssetsToWatchlist(
+    input: AddAssetsToWatchlistInput!
+  ): AddAssetsToWatchlistPayload!
+  changeAssetPositionInWatchlist(
+    input: ChangeAssetPositionInWatchlistInput!
+  ): ChangeAssetPositionInWatchlistPayload!
+  createAlert(input: CreateAlertInput!): CreateAlertPayload!
+  deleteAlert(input: DeleteAlertInput!): DeleteAlertPayload!
+  deleteNotification(
+    input: DeleteNotificationInput!
+  ): DeleteNotificationPayload!
+  deleteNotifications(
+    input: DeleteNotificationsInput!
+  ): DeleteNotificationsPayload!
+  importAsset(input: ImportAssetInput!): ImportAssetPayload!
+  importAssets(input: ImportAssetsInput!): ImportAssetsPayload!
+  markNotificationRead(
+    input: MarkNotificationReadInput!
+  ): MarkNotificationReadPayload!
+  markNotificationsRead(
+    input: MarkNotificationsReadInput!
+  ): MarkNotificationsReadPayload!
+  removeAssetFromWatchlist(
+    input: RemoveAssetFromWatchlistInput!
+  ): RemoveAssetFromWatchlistPayload!
+  removeAssetsFromWatchlist(
+    input: RemoveAssetsFromWatchlistInput!
+  ): RemoveAssetsFromWatchlistPayload!
+  updateAssetPrice(input: UpdateAssetPriceInput!): UpdateAssetPricePayload!
+  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfilePayload!
+}
+
+"""
+The node interface is implemented by entities that have a global unique identifier.
+"""
+interface Node {
+  id: ID!
+}
+
+type NotAuthenticatedError implements Error {
+  message: String!
+}
+
+type Notification implements Node {
+  asset: Asset!
+  id: ID!
+  message: String
+  read: Boolean!
+  username: String!
+}
+
+type NotificationUpdate {
+  notification: Notification
+  unreadNotifications: Int!
+}
+
+"""
+A connection to a list of items.
+"""
+type NotificationsConnection {
+  """
+  A list of edges.
+  """
+  edges: [NotificationsEdge!]
+
+  """
+  A flattened list of the nodes.
+  """
+  nodes: [Notification!]
+
+  """
+  Information to aid in pagination.
+  """
+  pageInfo: PageInfo!
+  totalCount: Int!
+}
+
+"""
+An edge in a connection.
+"""
+type NotificationsEdge {
+  """
+  A cursor for use in pagination.
+  """
+  cursor: String!
+
+  """
+  The item at the end of the edge.
+  """
+  node: Notification!
+}
+
+"""
+Information about pagination in a connection.
+"""
+type PageInfo {
+  """
+  When paginating forwards, the cursor to continue.
+  """
+  endCursor: String
+
+  """
+  Indicates whether more edges exist following the set defined by the clients arguments.
+  """
+  hasNextPage: Boolean!
+
+  """
+  Indicates whether more edges exist prior the set defined by the clients arguments.
+  """
+  hasPreviousPage: Boolean!
+
+  """
+  When paginating backwards, the cursor to continue.
+  """
+  startCursor: String
+}
+
+type Query {
+  assetById(id: ID!): Asset
+  assetBySlug(slug: String!): Asset
+  assetBySymbol(symbol: String!): Asset
+  assets(
+    """
+    Returns the elements in the list that come after the specified cursor.
+    """
+    after: String
+
+    """
+    Returns the elements in the list that come before the specified cursor.
+    """
+    before: String
+
+    """
+    Returns the first _n_ elements from the list.
+    """
+    first: Int
+
+    """
+    Returns the last _n_ elements from the list.
+    """
+    last: Int
+    order: [AssetSortInput!]
+    where: AssetFilterInput
+  ): AssetsConnection
+  assetsById(ids: [ID!]!): [Asset]!
+  assetsBySlug(slugs: [String!]!): [Asset]!
+  assetsBySymbol(symbols: [String!]!): [Asset]!
+  me: User
+
+  """
+  Fetches an object given its ID.
+  """
+  node(
+    """
+    ID of the object.
+    """
+    id: ID!
+  ): Node
+
+  """
+  Lookup nodes by a list of IDs.
+  """
+  nodes(
+    """
+    The list of node IDs.
+    """
+    ids: [ID!]!
+  ): [Node]!
+}
+
+enum ReadStatus {
+  ALL
+  READ
+  UNREAD
+}
+
+input RemoveAssetFromWatchlistInput {
+  symbol: String!
+}
+
+type RemoveAssetFromWatchlistPayload {
+  removedAsset: Asset
+  watchlist: Watchlist
+}
+
+input RemoveAssetsFromWatchlistInput {
+  symbols: [String!]!
+}
+
+type RemoveAssetsFromWatchlistPayload {
+  removedAssets(
+    """
+    Returns the elements in the list that come after the specified cursor.
+    """
+    after: String
+
+    """
+    Returns the elements in the list that come before the specified cursor.
+    """
+    before: String
+
+    """
+    Returns the first _n_ elements from the list.
+    """
+    first: Int
+
+    """
+    Returns the last _n_ elements from the list.
+    """
+    last: Int
+  ): RemovedAssetsConnection
+  watchlist: Watchlist
+}
+
+"""
+A connection to a list of items.
+"""
+type RemovedAssetsConnection {
+  """
+  A list of edges.
+  """
+  edges: [RemovedAssetsEdge!]
+
+  """
+  A flattened list of the nodes.
+  """
+  nodes: [Asset!]
+
+  """
+  Information to aid in pagination.
+  """
+  pageInfo: PageInfo!
+}
+
+"""
+An edge in a connection.
+"""
+type RemovedAssetsEdge {
+  """
+  A cursor for use in pagination.
+  """
+  cursor: String!
+
+  """
+  The item at the end of the edge.
+  """
+  node: Asset!
+}
+
+enum SortEnumType {
+  ASC
+  DESC
+}
+
+input StringOperationFilterInput {
+  and: [StringOperationFilterInput!]
+  contains: String
+  endsWith: String
+  eq: String
+  in: [String]
+  ncontains: String
+  nendsWith: String
+  neq: String
+  nin: [String]
+  nstartsWith: String
+  or: [StringOperationFilterInput!]
+  startsWith: String
+}
+
+type Subscription {
+  onNotification: NotificationUpdate!
+  onPriceChange(symbols: [String!]): AssetPrice!
+}
+
+type UnknownAssetError implements Error {
+  message: String!
+  symbols: [String!]!
+}
+
+type UnknownCurrencyError implements Error {
+  currency: String!
+  message: String!
+}
+
+type UnknownNotificationError implements Error {
+  message: String!
+  notificationIds: [Int!]!
+}
+
+type UnknownWatchlistError implements Error {
+  message: String!
+  username: String!
+}
+
+union UpdateAssetPriceError = UnknownAssetError
+
+input UpdateAssetPriceInput {
+  change24Hour: Int! = 0
+  circulatingSupply: Int! = 0
+  currency: String!
+  high24Hour: Int! = 0
+  lastPrice: Float!
+  low24Hour: Int! = 0
+  marketCap: Int! = 0
+  maxSupply: Int! = 0
+  open24Hour: Int! = 0
+  symbol: String!
+  tradableMarketCapRank: Int! = 0
+  tradingActivity: Int! = 0
+  volume24Hour: Int! = 0
+  volumePercentChange24Hour: Int! = 0
+}
+
+type UpdateAssetPricePayload {
+  errors: [UpdateAssetPriceError!]
+  updatedPrice: AssetPrice
+}
+
+input UpdateUserProfileInput {
+  displayName: String
+  image: Upload
+}
+
+type UpdateUserProfilePayload {
+  updatedUser: User
+}
+
+"""
+The `Upload` scalar type represents a file upload.
+"""
+scalar Upload
+
+type User {
+  alerts(
+    """
+    Returns the elements in the list that come after the specified cursor.
+    """
+    after: String
+
+    """
+    Returns the elements in the list that come before the specified cursor.
+    """
+    before: String
+
+    """
+    Returns the first _n_ elements from the list.
+    """
+    first: Int
+
+    """
+    Returns the last _n_ elements from the list.
+    """
+    last: Int
+  ): UserAlertConnection
+  displayName: String
+  id: ID!
+  imageUrl: String
+  name: String!
+  notifications(
+    """
+    Returns the elements in the list that come after the specified cursor.
+    """
+    after: String
+
+    """
+    Returns the elements in the list that come before the specified cursor.
+    """
+    before: String
+
+    """
+    Returns the first _n_ elements from the list.
+    """
+    first: Int
+
+    """
+    Returns the last _n_ elements from the list.
+    """
+    last: Int
+    status: ReadStatus! = ALL
+  ): NotificationsConnection
+  watchlist: Watchlist
+}
+
+"""
+A connection to a list of items.
+"""
+type UserAlertConnection {
+  """
+  A list of edges.
+  """
+  edges: [UserAlertEdge!]
+
+  """
+  A flattened list of the nodes.
+  """
+  nodes: [Alert!]
+
+  """
+  Information to aid in pagination.
+  """
+  pageInfo: PageInfo!
+}
+
+"""
+An edge in a connection.
+"""
+type UserAlertEdge {
+  """
+  A cursor for use in pagination.
+  """
+  cursor: String!
+
+  """
+  The item at the end of the edge.
+  """
+  node: Alert!
+}
+
+type Watchlist implements Node {
+  assets(
+    """
+    Returns the elements in the list that come after the specified cursor.
+    """
+    after: String
+
+    """
+    Returns the elements in the list that come before the specified cursor.
+    """
+    before: String
+
+    """
+    Returns the first _n_ elements from the list.
+    """
+    first: Int
+
+    """
+    Returns the last _n_ elements from the list.
+    """
+    last: Int
+  ): AssetsConnection
+  id: ID!
+  user: User!
+}
diff --git a/crypto/frontend/generated/SettingsProfileUUPMutation.graphql.js b/crypto/frontend/generated/SettingsProfileUUPMutation.graphql.js
new file mode 100644
index 0000000000000000000000000000000000000000..9b7514a2f866e74bf6803b88ee7bbf28d6ef0740
--- /dev/null
+++ b/crypto/frontend/generated/SettingsProfileUUPMutation.graphql.js
@@ -0,0 +1,151 @@
+/**
+ * @generated SignedSource<<3699babae7f4e2e294b2bab2b594aee5>>
+ * @flow
+ * @lightSyntaxTransform
+ * @nogrep
+ */
+
+/* eslint-disable */
+
+'use strict';
+
+/*::
+import type { ConcreteRequest, Mutation } from 'relay-runtime';
+export type UpdateUserProfileInput = {|
+  displayName?: ?string,
+  image?: ?null,
+|};
+export type SettingsProfileUUPMutation$variables = {|
+  input: UpdateUserProfileInput,
+|};
+export type SettingsProfileUUPMutation$data = {|
+  +updateUserProfile: {|
+    +updatedUser: ?{|
+      +displayName: ?string,
+      +imageUrl: ?string,
+    |},
+  |},
+|};
+export type SettingsProfileUUPMutation = {|
+  variables: SettingsProfileUUPMutation$variables,
+  response: SettingsProfileUUPMutation$data,
+|};
+*/
+
+var node/*: ConcreteRequest*/ = (function(){
+var v0 = [
+  {
+    "defaultValue": null,
+    "kind": "LocalArgument",
+    "name": "input"
+  }
+],
+v1 = [
+  {
+    "kind": "Variable",
+    "name": "input",
+    "variableName": "input"
+  }
+],
+v2 = {
+  "alias": null,
+  "args": null,
+  "kind": "ScalarField",
+  "name": "displayName",
+  "storageKey": null
+},
+v3 = {
+  "alias": null,
+  "args": null,
+  "kind": "ScalarField",
+  "name": "imageUrl",
+  "storageKey": null
+};
+return {
+  "fragment": {
+    "argumentDefinitions": (v0/*: any*/),
+    "kind": "Fragment",
+    "metadata": null,
+    "name": "SettingsProfileUUPMutation",
+    "selections": [
+      {
+        "alias": null,
+        "args": (v1/*: any*/),
+        "concreteType": "UpdateUserProfilePayload",
+        "kind": "LinkedField",
+        "name": "updateUserProfile",
+        "plural": false,
+        "selections": [
+          {
+            "alias": null,
+            "args": null,
+            "concreteType": "User",
+            "kind": "LinkedField",
+            "name": "updatedUser",
+            "plural": false,
+            "selections": [
+              (v2/*: any*/),
+              (v3/*: any*/)
+            ],
+            "storageKey": null
+          }
+        ],
+        "storageKey": null
+      }
+    ],
+    "type": "Mutation",
+    "abstractKey": null
+  },
+  "kind": "Request",
+  "operation": {
+    "argumentDefinitions": (v0/*: any*/),
+    "kind": "Operation",
+    "name": "SettingsProfileUUPMutation",
+    "selections": [
+      {
+        "alias": null,
+        "args": (v1/*: any*/),
+        "concreteType": "UpdateUserProfilePayload",
+        "kind": "LinkedField",
+        "name": "updateUserProfile",
+        "plural": false,
+        "selections": [
+          {
+            "alias": null,
+            "args": null,
+            "concreteType": "User",
+            "kind": "LinkedField",
+            "name": "updatedUser",
+            "plural": false,
+            "selections": [
+              (v2/*: any*/),
+              (v3/*: any*/),
+              {
+                "alias": null,
+                "args": null,
+                "kind": "ScalarField",
+                "name": "id",
+                "storageKey": null
+              }
+            ],
+            "storageKey": null
+          }
+        ],
+        "storageKey": null
+      }
+    ]
+  },
+  "params": {
+    "cacheID": "5465ae30971c9b3b44211dc703959812",
+    "id": null,
+    "metadata": {},
+    "name": "SettingsProfileUUPMutation",
+    "operationKind": "mutation",
+    "text": "mutation SettingsProfileUUPMutation(\n  $input: UpdateUserProfileInput!\n) {\n  updateUserProfile(input: $input) {\n    updatedUser {\n      displayName\n      imageUrl\n      id\n    }\n  }\n}\n"
+  }
+};
+})();
+
+(node/*: any*/).hash = "dfb0375f9e1199ed14b99df82fdde270";
+
+export default node;
diff --git a/crypto/frontend/generated/DashboardTickerFragment_query.graphql.js b/crypto/frontend/generated/DashboardTickerFragment_query.graphql.js
new file mode 100644
index 0000000000000000000000000000000000000000..677fa1680b6de5e6d428349a7e0bcdbfe1de02c7
--- /dev/null
+++ b/crypto/frontend/generated/DashboardTickerFragment_query.graphql.js
@@ -0,0 +1,86 @@
+/**
+ * @generated SignedSource<<dbc51b39d71290f67515a999d7738b14>>
+ * @flow
+ * @lightSyntaxTransform
+ * @nogrep
+ */
+
+/* eslint-disable */
+
+'use strict';
+
+/*::
+import type { Fragment, ReaderFragment } from 'relay-runtime';
+import type { DashboardTickerItemFragment_asset$fragmentType } from "./DashboardTickerItemFragment_asset.graphql";
+import type { FragmentType } from "relay-runtime";
+declare export opaque type DashboardTickerFragment_query$fragmentType: FragmentType;
+export type DashboardTickerFragment_query$data = {|
+  +ticker: ?{|
+    +nodes: ?$ReadOnlyArray<{|
+      +symbol: string,
+      +$fragmentSpreads: DashboardTickerItemFragment_asset$fragmentType,
+    |}>,
+  |},
+  +$fragmentType: DashboardTickerFragment_query$fragmentType,
+|};
+export type DashboardTickerFragment_query$key = {
+  +$data?: DashboardTickerFragment_query$data,
+  +$fragmentSpreads: DashboardTickerFragment_query$fragmentType,
+  ...
+};
+*/
+
+var node/*: ReaderFragment*/ = {
+  "argumentDefinitions": [],
+  "kind": "Fragment",
+  "metadata": null,
+  "name": "DashboardTickerFragment_query",
+  "selections": [
+    {
+      "alias": "ticker",
+      "args": [
+        {
+          "kind": "Literal",
+          "name": "first",
+          "value": 10
+        }
+      ],
+      "concreteType": "AssetsConnection",
+      "kind": "LinkedField",
+      "name": "assets",
+      "plural": false,
+      "selections": [
+        {
+          "alias": null,
+          "args": null,
+          "concreteType": "Asset",
+          "kind": "LinkedField",
+          "name": "nodes",
+          "plural": true,
+          "selections": [
+            {
+              "alias": null,
+              "args": null,
+              "kind": "ScalarField",
+              "name": "symbol",
+              "storageKey": null
+            },
+            {
+              "args": null,
+              "kind": "FragmentSpread",
+              "name": "DashboardTickerItemFragment_asset"
+            }
+          ],
+          "storageKey": null
+        }
+      ],
+      "storageKey": "assets(first:10)"
+    }
+  ],
+  "type": "Query",
+  "abstractKey": null
+};
+
+(node/*: any*/).hash = "3eccc5cca7a3ad7f721845e2bd7fbded";
+
+export default node;
