diff --git a/crypto/frontend/generated/GreetingsQuery.graphql.js b/crypto/frontend/generated/GreetingsQuery.graphql.js
new file mode 100644
index 0000000000000000000000000000000000000000..3c72a0333afe52eb358c94e59fc45d5efe9e6a40
--- /dev/null
+++ b/crypto/frontend/generated/GreetingsQuery.graphql.js
@@ -0,0 +1,79 @@
+/**
+ * @generated SignedSource<<74a5db1e4460028532a7e69919b70de1>>
+ * @flow
+ * @lightSyntaxTransform
+ * @nogrep
+ */
+
+/* eslint-disable */
+
+'use strict';
+
+/*::
+import type { ConcreteRequest, Query } from 'relay-runtime';
+export type GreetingsQuery$variables = {|
+  name: string,
+|};
+export type GreetingsQuery$data = {|
+  +greetings: string,
+|};
+export type GreetingsQuery = {|
+  variables: GreetingsQuery$variables,
+  response: GreetingsQuery$data,
+|};
+*/
+
+var node/*: ConcreteRequest*/ = (function(){
+var v0 = [
+  {
+    "defaultValue": null,
+    "kind": "LocalArgument",
+    "name": "name"
+  }
+],
+v1 = [
+  {
+    "alias": null,
+    "args": [
+      {
+        "kind": "Variable",
+        "name": "name",
+        "variableName": "name"
+      }
+    ],
+    "kind": "ScalarField",
+    "name": "greetings",
+    "storageKey": null
+  }
+];
+return {
+  "fragment": {
+    "argumentDefinitions": (v0/*: any*/),
+    "kind": "Fragment",
+    "metadata": null,
+    "name": "GreetingsQuery",
+    "selections": (v1/*: any*/),
+    "type": "Query",
+    "abstractKey": null
+  },
+  "kind": "Request",
+  "operation": {
+    "argumentDefinitions": (v0/*: any*/),
+    "kind": "Operation",
+    "name": "GreetingsQuery",
+    "selections": (v1/*: any*/)
+  },
+  "params": {
+    "cacheID": "df17284c16608f10e79c40f215176912",
+    "id": null,
+    "metadata": {},
+    "name": "GreetingsQuery",
+    "operationKind": "query",
+    "text": "query GreetingsQuery(\n  $name: String!\n) {\n  greetings(name: $name)\n}\n"
+  }
+};
+})();
+
+(node/*: any*/).hash = "8100c9379a13b8b002da3186b76f05d6";
+
+export default node;
diff --git a/crypto/frontend/schema/server.graphql b/crypto/frontend/schema/server.graphql
new file mode 100644
index 0000000000000000000000000000000000000000..f8d6abc88acdb140458f0cf9dc13433ac41ba4c9
--- /dev/null
+++ b/crypto/frontend/schema/server.graphql
@@ -0,0 +1,38 @@
+"""
+The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
+"""
+directive @defer(
+  """
+  Deferred when true.
+  """
+  if: Boolean
+
+  """
+  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
+  """
+  label: String
+) on FRAGMENT_SPREAD | INLINE_FRAGMENT
+
+"""
+The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
+"""
+directive @stream(
+  """
+  Streamed when true.
+  """
+  if: Boolean
+
+  """
+  The initial elements that shall be send down to the consumer.
+  """
+  initialCount: Int! = 0
+
+  """
+  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
+  """
+  label: String
+) on FIELD
+
+type Query {
+  greetings(name: String! = "World"): String!
+}
diff --git a/crypto/frontend/scenes/Greetings.js b/crypto/frontend/scenes/Greetings.js
new file mode 100644
index 0000000000000000000000000000000000000000..89d0639a1aacc01afccd7f2340c735ee182b53ab
--- /dev/null
+++ b/crypto/frontend/scenes/Greetings.js
@@ -0,0 +1,14 @@
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+export default function Greetings({name}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query GreetingsQuery($name: String!) {
+        greetings(name: $name)
+      }
+    `,
+    {name},
+  );
+
+  return <div>{data.greetings}</div>;
+}
diff --git a/crypto/frontend/pages/index.js b/crypto/frontend/pages/index.js
index 8b3e2fa25f805f5e59f6da3bc19b8f1365bbb124..b85b77e7e8d3d7aa6b9d8e488d4525737b0c09b0 100644
--- a/crypto/frontend/pages/index.js
+++ b/crypto/frontend/pages/index.js
@@ -1 +1,37 @@
-export {Dummy as default} from '@/components';
+import {Suspense} from 'react';
+import {RelayEnvironmentProvider} from 'react-relay';
+import {Environment, Network, RecordSource, Store} from 'relay-runtime';
+
+import {default as Greetings} from '@/scenes/Greetings';
+
+const fetchGraphQL = async (query, variables) => {
+  const response = await fetch('http://localhost:5000/graphql', {
+    method: 'POST',
+    headers: {
+      'Content-Type': 'application/json',
+    },
+    body: JSON.stringify({
+      query,
+      variables,
+    }),
+  });
+
+  return await response.json();
+};
+
+const fetchFn = (params, variables) => fetchGraphQL(params.text, variables);
+
+const environment = new Environment({
+  network: Network.create(fetchFn),
+  store: new Store(new RecordSource()),
+});
+
+export default function Main() {
+  return (
+    <RelayEnvironmentProvider environment={environment}>
+      <Suspense fallback="Loading...">
+        <Greetings name="Luke" />
+      </Suspense>
+    </RelayEnvironmentProvider>
+  );
+}
