diff --git a/crypto/frontend/pages/index.js b/crypto/frontend/pages/index.js
index 0000000000000000000000000000000000000000..b85b77e7e8d3d7aa6b9d8e488d4525737b0c09b0 100644
--- a/crypto/frontend/pages/index.js
+++ b/crypto/frontend/pages/index.js
@@ -1,37 +1,37 @@
-import {Suspense} from 'react';
-import {RelayEnvironmentProvider} from 'react-relay';
-import {Environment, Network, RecordSource, Store} from 'relay-runtime';
-
-import {default as Greetings} from '@/scenes/Greetings';
-
-const fetchGraphQL = async (query, variables) => {
-  const response = await fetch('http://localhost:5000/graphql', {
-    method: 'POST',
-    headers: {
-      'Content-Type': 'application/json',
-    },
-    body: JSON.stringify({
-      query,
-      variables,
-    }),
-  });
-
-  return await response.json();
-};
-
-const fetchFn = (params, variables) => fetchGraphQL(params.text, variables);
-
-const environment = new Environment({
-  network: Network.create(fetchFn),
-  store: new Store(new RecordSource()),
-});
-
-export default function Main() {
-  return (
-    <RelayEnvironmentProvider environment={environment}>
-      <Suspense fallback="Loading...">
-        <Greetings />
-      </Suspense>
-    </RelayEnvironmentProvider>
-  );
-}
+import {Suspense} from 'react';
+import {RelayEnvironmentProvider} from 'react-relay';
+import {Environment, Network, RecordSource, Store} from 'relay-runtime';
+
+import {default as Greetings} from '@/scenes/Greetings';
+
+const fetchGraphQL = async (query, variables) => {
+  const response = await fetch('http://localhost:5000/graphql', {
+    method: 'POST',
+    headers: {
+      'Content-Type': 'application/json',
+    },
+    body: JSON.stringify({
+      query,
+      variables,
+    }),
+  });
+
+  return await response.json();
+};
+
+const fetchFn = (params, variables) => fetchGraphQL(params.text, variables);
+
+const environment = new Environment({
+  network: Network.create(fetchFn),
+  store: new Store(new RecordSource()),
+});
+
+export default function Main() {
+  return (
+    <RelayEnvironmentProvider environment={environment}>
+      <Suspense fallback="Loading...">
+        <Greetings name="Luke" />
+      </Suspense>
+    </RelayEnvironmentProvider>
+  );
+}
diff --git a/crypto/frontend/scenes/Greetings.js b/crypto/frontend/scenes/Greetings.js
index 0000000000000000000000000000000000000000..852d9744fe4cdf711cdd75210cde125e5e378d8f 100644
--- a/crypto/frontend/scenes/Greetings.js
+++ b/crypto/frontend/scenes/Greetings.js
@@ -1,14 +1,14 @@
-import {graphql, useLazyLoadQuery} from 'react-relay';
-
-export default function Greetings() {
-  const data = useLazyLoadQuery(
-    graphql`
-      query GreetingsQuery {
-        greetings
-      }
-    `,
-    {},
-  );
-
-  return <div>{data.greetings}</div>;
-}
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+export default function Greetings({name}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query GreetingsQuery($name: String!) {
+        greetings(name: $name)
+      }
+    `,
+    {name},
+  );
+
+  return <div>{data.greetings}</div>;
+}
diff --git a/crypto/frontend/generated/GreetingsQuery.graphql.js b/crypto/frontend/generated/GreetingsQuery.graphql.js
index 0000000000000000000000000000000000000000..3c72a0333afe52eb358c94e59fc45d5efe9e6a40 100644
--- a/crypto/frontend/generated/GreetingsQuery.graphql.js
+++ b/crypto/frontend/generated/GreetingsQuery.graphql.js
@@ -1,51 +1,64 @@
-/**
- * @generated SignedSource<<a2de065d887a05e8af1910bdf9c3b51d>>
- * @lightSyntaxTransform
- * @nogrep
- */
-
-/* eslint-disable */
-
-'use strict';
-
-
-var node = (function(){
-var v0 = [
-  {
-    "alias": null,
-    "args": null,
-    "kind": "ScalarField",
-    "name": "greetings",
-    "storageKey": null
-  }
-];
-return {
-  "fragment": {
-    "argumentDefinitions": [],
-    "kind": "Fragment",
-    "metadata": null,
-    "name": "GreetingsQuery",
-    "selections": (v0/*: any*/),
-    "type": "Query",
-    "abstractKey": null
-  },
-  "kind": "Request",
-  "operation": {
-    "argumentDefinitions": [],
-    "kind": "Operation",
-    "name": "GreetingsQuery",
-    "selections": (v0/*: any*/)
-  },
-  "params": {
-    "cacheID": "acbfaea45bca09685fc5691a1903f78a",
-    "id": null,
-    "metadata": {},
-    "name": "GreetingsQuery",
-    "operationKind": "query",
-    "text": "query GreetingsQuery {\n  greetings\n}\n"
-  }
-};
-})();
-
-node.hash = "613f3ef79740dc8be3c71bb5b04d5e2f";
-export default node;
+/**
+ * @generated SignedSource<<13cc28d6173216c5c2051e50cb5b41e1>>
+ * @lightSyntaxTransform
+ * @nogrep
+ */
+
+/* eslint-disable */
+
+'use strict';
+
+
+var node = (function(){
+var v0 = [
+  {
+    "defaultValue": null,
+    "kind": "LocalArgument",
+    "name": "name"
+  }
+],
+v1 = [
+  {
+    "alias": null,
+    "args": [
+      {
+        "kind": "Variable",
+        "name": "name",
+        "variableName": "name"
+      }
+    ],
+    "kind": "ScalarField",
+    "name": "greetings",
+    "storageKey": null
+  }
+];
+return {
+  "fragment": {
+    "argumentDefinitions": (v0/*: any*/),
+    "kind": "Fragment",
+    "metadata": null,
+    "name": "GreetingsQuery",
+    "selections": (v1/*: any*/),
+    "type": "Query",
+    "abstractKey": null
+  },
+  "kind": "Request",
+  "operation": {
+    "argumentDefinitions": (v0/*: any*/),
+    "kind": "Operation",
+    "name": "GreetingsQuery",
+    "selections": (v1/*: any*/)
+  },
+  "params": {
+    "cacheID": "df17284c16608f10e79c40f215176912",
+    "id": null,
+    "metadata": {},
+    "name": "GreetingsQuery",
+    "operationKind": "query",
+    "text": "query GreetingsQuery(\n  $name: String!\n) {\n  greetings(name: $name)\n}\n"
+  }
+};
+})();
+
+node.hash = "8100c9379a13b8b002da3186b76f05d6";
+export default node;
